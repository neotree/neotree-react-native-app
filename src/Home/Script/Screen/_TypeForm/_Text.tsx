import React, { useMemo } from 'react';

import { useScriptContext } from '@/src/contexts/script';
import { Box,NeotreeIDInput, TextInput} from '../../../../components';
import * as types from '../../../../types';


type TextFieldProps = types.ScreenFormTypeProps & {
    patientNUID?: string | null;
};


export function TextField({ 
    field, 
    conditionMet, 
    entryValue, 
    patientNUID,
    repeatable,
    editable ,
    onChange 
}: TextFieldProps) {
    const { generatedUID } = useScriptContext();
    const isNeotreeID = field.key.match('UID') || field.key.match('NUID_') || field.key.match(new RegExp('neotree', 'gi'));
	const prePopulatedUID = ''; // ctx.matched?.prePopulateWithUID ? ctx.matched?.uid : '';
    // const scriptType = script?.type
    // const isScanable = scriptType==='neolab' ||scriptType==='discharge'

    const [value, setValue] = React.useState(entryValue?.value || (isNeotreeID ? prePopulatedUID : '') || '');
    const [error, setError] = React.useState('');
    const [disabled, setDisabled] = React.useState(false);
    const canEdit = repeatable?editable:true

    React.useEffect(() => { 
        if (!conditionMet) {
            onChange({ value: null, valueText: null, exportType: 'text', }); 
            setValue('');
        }
    }, [conditionMet]);

    React.useEffect(() => {
        if (isNeotreeID && conditionMet && patientNUID) {
            onChange({ value: patientNUID, valueText: patientNUID, exportType: 'text', }); 
            setValue(patientNUID);
            setDisabled(true);
        }
    }, [conditionMet, patientNUID, field.key]);

    const autoGenerateValue = useMemo(() => !!field.defaultValue, [field]);

    return (
        <Box>
            {isNeotreeID ? (
                <>
                <NeotreeIDInput 
                    disabled={disabled || !conditionMet || (autoGenerateValue && (field.canEditAutoGeneratedValue !== true))}
                    defaultValue={prePopulatedUID}
                    label={`${field.label}${field.optional ? '' : ' *'}`}
                    value={value}
                    generatedUID={generatedUID}
                    onChange={val => {
                        setValue(`${val || ''}`);
                        onChange({ value: val,valueText:val, exportType: 'text',exportLabel:value  });
                    }}
                    autoGenerateValue={autoGenerateValue}

                />
                </>
            ) : (
            
                <TextInput
                    multiline
                    editable={conditionMet && canEdit}
                    label={`${field.label}${field.optional ? '' : ' *'}`}
                    value={value}
                    errors={error ? [error] : []}
                    onChangeText={value => {                    
                        let err = '';
                        setValue(value);
                        setError(err);
                        onChange({ value: err ? null : value, valueText:value,exportType: 'text',exportLabel:value });
                    }}
                />
            
            )}
        </Box>
    );
}
