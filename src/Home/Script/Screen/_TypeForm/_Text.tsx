import React, { useMemo } from 'react';
import { Box, Button, NeotreeIDInput, TextInput,Br} from '../../../../components';
import * as types from '../../../../types';
import { useContext } from '../../Context';
import { QRCodeScan} from '@/src/components/Session/QRScan/QRCodeScan';


type TextFieldProps = types.ScreenFormTypeProps & {
    patientNUID?: string | null;
};


export function TextField({ 
    field, 
    conditionMet, 
    entryValue, 
    patientNUID,
    onChange 
}: TextFieldProps) {
    const ctx = useContext();
    const isNeotreeID = field.key.match('UID') || field.key.match('NUID_') || field.key.match(new RegExp('neotree', 'gi'));
    
	const prePopulatedUID = ''; // ctx.matched?.prePopulateWithUID ? ctx.matched?.uid : '';
    const scriptType = ctx?.script?.type
    const isScanable = scriptType==='neolab' ||scriptType==='discharge'

    const [value, setValue] = React.useState(entryValue?.value || (isNeotreeID ? prePopulatedUID : '') || '');
    const [error, setError] = React.useState('');
    const [disabled, setDisabled] = React.useState(false);
const [showQR, setShowQR] = React.useState(false);

  const openQRscanner = () => {
    setShowQR(true);
  };

  const onQrRead = (qrtext: any) => {
    if(qrtext){
    setValue(qrtext);
    }
    setShowQR(false);
  };

    React.useEffect(() => { 
        if (!conditionMet) {
            onChange({ value: null, valueText: null, exportType: 'text', }); 
            setValue('');
        }
    }, [conditionMet]);

    React.useEffect(() => {
        if (`${field.key}`.match(/NUID_/gi) && conditionMet && patientNUID) {
            onChange({ value: patientNUID, valueText: patientNUID, exportType: 'text', }); 
            setValue(patientNUID);
            setDisabled(true);
        }
    }, [conditionMet, patientNUID, field.key]);

    const autoGenerateValue = useMemo(() => !!field.defaultValue, [field]);

    return (
        <Box>
            {isNeotreeID ? (
                <>
                <NeotreeIDInput 
                    disabled={disabled || !conditionMet || (autoGenerateValue && (field.canEditAutoGeneratedValue !== true))}
                    defaultValue={prePopulatedUID}
                    label={`${field.label}${field.optional ? '' : ' *'}`}
                    value={value}
                    generatedUID={ctx.generatedUID}
                    onChange={val => {
                        setValue(`${val || ''}`);
                        onChange({ value: val, exportType: 'text', });
                    }}
                    autoGenerateValue={autoGenerateValue}

                />
                {isScanable && 
                <>
                <Br />
               <Button 
               disabled={value!=''}
               color='primary'
               onPress={() => openQRscanner()}>
               Scan QR
               </Button>
               {showQR ? <QRCodeScan onRead={onQrRead} /> : null}
               </>
                } 
                </>
            ) : (
            
                <TextInput
                    editable={conditionMet}
                    label={`${field.label}${field.optional ? '' : ' *'}`}
                    value={value}
                    errors={error ? [error] : []}
                    onChangeText={value => {                    
                        let err = '';
                        setValue(value);
                        setError(err);
                        onChange({ value: err ? null : value, exportType: 'text', });
                    }}
                />
            
            )}
        </Box>
    );
}
